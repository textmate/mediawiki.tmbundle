<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/php
&lt;?php
// creator: tim.bates@ed.ac.uk 
// license = GPL
// created 12 Dec 2012
// Purpose: Takes selected mediawiki table like 
/*

| a   ||e  || u
| b || elephant  || prissy
| c   || minuet-in-g   || A
 and returns it formatted nicely into columns thus:

| a || e           || u
| b || elephant    || prissy
| c || minuet-in-g || A
*/

// USEAGE notes: 
// Set $debug to 1 to let play with it in a TM window

$debug         = 0; // 0 to run properly
$padWidth      = 7; // sea change :-)
$delimitter    = "\|\|";
$validRowMatch = "^|(?!-)"; // negative look-ahead for |-

function getMaxWidths($aMatrix){
	$o = array();
	$n = 0;
	foreach ($aMatrix as $key =&gt; $row) {
		if ($n==0) {
			foreach ($row as $key =&gt; $cell) {
				$o[] = strlen($cell);
			}
		} else {
			// Compare each to see which is longer
			$c = 0;
			foreach ($row as $key =&gt; $cell) {
				if ($o[$c] &lt; strlen($cell)) { $o[$c] = strlen($cell); }
				$c++;
			}
		}
		$n++;
	}
	return $o;
}

function stringTo2DArray($stringIn, $delimitter="||"){
	// rows are lines
	// strips all white space either side of the delimitter
	$o        = array();
	$stringIn = trim($stringIn);
	$rows     = explode("\n", $stringIn);

	$pattern     = '/^\|\s\s+/'; # white space after | at the beginning of a line
	$replacement = '| ';
	$rows        = preg_replace($pattern, $replacement, $rows);
	$find = "/ *" . $delimitter . " */";

	foreach ($rows as $key =&gt; $row) {
		$row = trim($row);
		$row = preg_replace($find, $delimitter, $row);
		$o[] = explode($delimitter, $row);
	}
	return $o;
}

function stringToArray($stringIn, $delimitter=" "){
    // strips newlines and all white space
    $stringIn  = preg_replace("/[ \t\n]{2,}/", " ", $stringIn); //remove multiple spaces in case some present
    $stringIn  = trim($stringIn);
    return explode($delimitter, $stringIn);
}

function arrayToString($aVars, $suffix="1"){
    $sep = "$suffix ";
	if ( !is_array($aVars) ) {
		echo("&lt;font color=\"red\"&gt;arrayToString got $aVars  when it expected an array&lt;/font&gt;&lt;br&gt;");
		return "arrayToString got $aVars  when it expected an array";
	}else{
	    return implode($sep, $aVars). $sep;
	}
}

if ($debug) {
	$input ="|-
| a   ||e  || u
|-
| b|| elephant  || prissy
|-
|      c   || minuet-in-g   || A
";
	echo "$input\n\n\n";
}else{
   $input = file_get_contents('php://stdin');
   // $input = $_ENV["TM_SELECTED_TEXT"];	
}

// make 2D array;
$aMatrix  = stringTo2DArray($input,$delimitter);

// print_r($aMatrix);

$aPadWidth = getMaxWidths($aMatrix);
// print_r($aPadWidth);

$outStr   = "";

foreach ($aMatrix as $key =&gt; $row) {
	$c = 0;
	$newRow = array();
	foreach ($row as $key =&gt; $cell) {
		$newRow[]  = str_pad($cell, $aPadWidth[$c]);
		$c++;
	}
	$outStr.= trim( implode(" || ", $newRow) ) . "\n";
}
echo str_replace("|| ~", "||~ ", $outStr);
?&gt;
</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>name</key>
	<string>Reformat columns to equal width</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>replaceInput</string>
	<key>scope</key>
	<string>text.html.mediawiki</string>
	<key>uuid</key>
	<string>2ACC7FC8-AF68-48FA-AB6D-6B383149CDD6</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
